{"name":"MML","tagline":"Minimalistic Mathematics Library","body":"The *MML* was born as a collection of various maths tools that\r\nI needed at some point in some of my projects. It is now a rather\r\nunified library that focuses on fundamental lightweight 2D shapes.\r\n\r\nIt is a \"headers only\" library, as it relies on templates / macros\r\nto decide what types to use for value storage and for intermediate\r\ncomputations, and what relational operations to use on them.\r\n\r\n\r\nShapes\r\n------\r\n\r\nThe *MML* expose a variadic `Shape` structure, implemented with\r\n`boost variant`. Each shape can be one of those fundamental shapes:\r\n  * a `Point` / `Vector`;\r\n  * a `Line` segment;\r\n  * a `Rect` (which is really an *AABB*);\r\n  * a `Circle`;\r\n  * a generic `Polygon` (a basic list of points).\r\n\r\n```c++\r\n#include <nauths/mml/mml.hh>\r\n\r\ntypedef mml::shapes<int>::Point  Point;\r\ntypedef mml::shapes<int>::Rect   Rect;\r\ntypedef mml::shapes<int>::Circle Circle;\r\ntypedef mml::shapes<int>::Shape  Shape;\r\n\r\nvoid test()\r\n{\r\n  Shape circle = Circle(Point(10, 10), 10);\r\n  Shape box = Rect(Point(0, 0), Point(20, 20));\r\n  Rect circle_bbox = circle.bounding_rect();\r\n\r\n  assert(circle_bbox == box);\r\n\r\n  std::cout << \"circle area: \" << circle.area() << std::endl\r\n            << \"box area:    \" << box.area()    << std::endl;\r\n}\r\n```\r\n\r\n\r\n\r\nAlgorithms\r\n----------\r\n\r\nSome high-level algorithms that work on shapes include *inclusion test*\r\nand *overlapping tests*. One can even use a given optional macro to\r\ndefine relational operators on shapes based on the inclusion notion.\r\n\r\n```c++\r\n#define MML_OPERATORS // enables < and > relations\r\n#define MML_MACROS    // enables _contains_ and _is_in_ alias\r\n\r\n#include <nauths/mml/mml.hh>\r\n\r\ntypedef mml::shapes<int>::Shape Shape;\r\n\r\nvoid test(Shape const& s1, Shape const& s2)\r\n{\r\n  assert(mml::contains(s1, s2) == (s1 > s2));\r\n  assert(mml::contains(s1, s2) == (s1 _contains_ s2));\r\n  assert(mml::is_in(s1, s2) == (s1 < s2));\r\n  assert(mml::is_in(s1, s2) == (s1 _is_in_ s2));\r\n}\r\n```\r\n\r\n\r\n\r\nTools\r\n-----------\r\n\r\nThe *MML* implements several other tools, such as a basic Perlin Noise\r\ngenerator and a regular / semi-regular tiling generator. For more\r\ninformation, please see the full documentation in the\r\n[Wiki](https://github.com/nicuveo/MML/wiki).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}